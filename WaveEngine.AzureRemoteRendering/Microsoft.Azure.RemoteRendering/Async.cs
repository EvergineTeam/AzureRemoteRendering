// <auto-generated/>
#pragma warning disable

using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace Microsoft.Azure.RemoteRendering
{
    /// <summary>
    /// Base class for all remote rendering session exceptions.
    /// </summary>
    public class RRSessionException : Exception
    {
        /// <summary>Creates a new instance of the <see cref='RRSessionException'/> class.</summary>
        public RRSessionException()
        {
            this.Context = default(SessionGeneralContext);
        }

        /// <summary>Creates a new instance of the <see cref='RRSessionException'/> class.</summary>
        /// <param name='code'>Error code for this exception.</param>
        public RRSessionException(SessionGeneralContext context)
            : base($"Operation returned \'{context.Result.ToString()}. {context.ErrorMessage}\'.")
        {
            this.Context = context;
        }

        public SessionGeneralContext Context { get; }
    }

    public partial class AsyncBase
    {
        static HashSet<AsyncBase> _inFlightTasks = new HashSet<AsyncBase>();

        protected void GrabReference()
        {
            lock (_inFlightTasks)
            {
                if (!_inFlightTasks.Add(this))
                {
                    throw new RRException(Result.BadStateTransition, "AsyncBase.GrabReference was called twice without calling ReleaseReference.");
                }
            }
        }

        protected void ReleaseReference()
        {
            lock (_inFlightTasks)
            {
                if (!_inFlightTasks.Remove(this))
                {
                    throw new RRException(Result.BadStateTransition, "AsyncBase.ReleaseReference was called before GrabReference or twice in a row.");
                }
            }
        }

    }

    /// Task generation. This should ideally be automated/more generic. The semantics for callbacks with derived classes (Bug#24391386) prevent us from
    /// writing a simple async class


    public partial class BoundsQueryAsync
    {
        private TaskCompletionSource<AABB3D> _taskSource = null;

        internal void OnCompleted(BoundsQueryAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRException(value.Status, $"{value.GetType().Name} exception: {value.Status}"));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<AABB3D> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<AABB3D>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }

            return _taskSource.Task;
        }
    }

    public partial class MetadataQueryAsync
    {
        private TaskCompletionSource<ObjectMetaData> _taskSource = null;

        internal void OnCompleted(MetadataQueryAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRException(value.Status, $"{value.GetType().Name} exception: {value.Status}"));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<ObjectMetaData> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<ObjectMetaData>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }

    public partial class LoadModelAsync
    {
        private TaskCompletionSource<LoadModelResult> _taskSource = null;

        internal void OnCompleted(LoadModelAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRException(value.Status, $"{value.GetType().Name} exception: {value.Status}"));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<LoadModelResult> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<LoadModelResult>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }

    public partial class LoadTextureAsync
    {
        private TaskCompletionSource<Texture> _taskSource = null;

        internal void OnCompleted(LoadTextureAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRException(value.Status, $"{value.GetType().Name} exception: {value.Status}"));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<Texture> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<Texture>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }

    public partial class RaycastQueryAsync
    {
        private TaskCompletionSource<RayCastHit[]> _taskSource = null;
        internal void OnCompleted(RaycastQueryAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRException(value.Status, $"{value.GetType().Name} exception: {value.Status}"));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();

        }
        public Task<RayCastHit[]> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<RayCastHit[]>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }

    public partial class PerformanceAssessmentAsync
    {
        private TaskCompletionSource<PerformanceAssessment> _taskSource = null;

        internal void OnCompleted(PerformanceAssessmentAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRException(value.Status, $"{value.GetType().Name} exception: {value.Status}"));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<PerformanceAssessment> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<PerformanceAssessment>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }

    public partial class SessionAsync
    {
        private TaskCompletionSource<Result> _taskSource = null;

        internal void OnCompleted(SessionAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRSessionException(value.Context));
            }
            else
            {
                _taskSource.TrySetResult(Result.Success);
            }
            ReleaseReference();
        }

        public Task<Result> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<Result>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }

            return _taskSource.Task;
        }
    }

    public partial class CreateSessionAsync
    {
        private TaskCompletionSource<AzureSession> _taskSource = null;

        internal void OnCompleted(CreateSessionAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRSessionException(value.Context));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<AzureSession> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<AzureSession>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }

    public partial class ArrInspectorAsync
    {
        private TaskCompletionSource<string> _taskSource = null;

        internal void OnCompleted(ArrInspectorAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRException(value.Status, $"{value.GetType().Name} exception: {value.Status}"));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<string> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<string>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }

    public partial class SessionPropertiesAsync
    {
        private TaskCompletionSource<RenderingSessionProperties> _taskSource = null;

        internal void OnCompleted(SessionPropertiesAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRSessionException(value.Context));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<RenderingSessionProperties> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<RenderingSessionProperties>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }

            return _taskSource.Task;
        }
    }

    public partial class SessionPropertiesArrayAsync
    {
        private TaskCompletionSource<RenderingSessionProperties[]> _taskSource = null;

        internal void OnCompleted(SessionPropertiesArrayAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRSessionException(value.Context));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<RenderingSessionProperties[]> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<RenderingSessionProperties[]>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }

            return _taskSource.Task;
        }
    }

    public partial class StartAssetConversionAsync
    {
        private TaskCompletionSource<string> _taskSource = null;
        internal void OnCompleted(StartAssetConversionAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRSessionException(value.Context));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<string> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<string>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }

    public partial class ConversionStatusAsync
    {
        private TaskCompletionSource<ConversionSessionStatus> _taskSource = null;

        internal void OnCompleted(ConversionStatusAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRSessionException(value.Context));
            }
            else
            {
                _taskSource.TrySetResult(value.Result);
            }
            ReleaseReference();
        }

        public Task<ConversionSessionStatus> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<ConversionSessionStatus>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }
    public partial class ConnectToRuntimeAsync
    {
        private TaskCompletionSource<Result> _taskSource = null;

        internal void OnCompleted(ConnectToRuntimeAsync value)
        {
            if (value.IsFaulted)
            {
                _taskSource.TrySetException(new RRException(value.Status, $"{value.GetType().Name} exception: {value.Status}"));
            }
            else
            {
                _taskSource.TrySetResult(value.Status);
            }
            ReleaseReference();
        }

        public Task<Result> AsTask()
        {
            lock (this)
            {
                if (_taskSource == null)
                {
                    _taskSource = new TaskCompletionSource<Result>();
                    GrabReference();
                    this.Completed += OnCompleted;
                }
            }
            return _taskSource.Task;
        }
    }
}
